import express from 'express';
import axios from 'axios';
import bodyParser from 'body-parser';
import cors from 'cors';
import multer from 'multer';
import fs from 'fs/promises';
import { exec } from 'child_process';

const app = express();
const port = 3000;

app.use(bodyParser.json());
app.use(cors());

const apiKey = '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';
const engine = 'text-davinci-003'; // Update to the latest engine if needed

const storage = multer.memoryStorage();
const upload = multer({ storage: storage });

app.post('/upload-pdf', upload.single('pdf'), async (req, res) => {
  try {
    const pdfBuffer = req.file.buffer;
    const filePath = 'temp.pdf';

    await fs.writeFile(filePath, pdfBuffer);

    // Run a script to extract text from the PDF and generate embeddings
    const embeddings = await generateEmbeddingFromPDF(filePath);

    // Optionally, you can store the embeddings or use them in your logic

    res.sendStatus(200);
  } catch (error) {
    console.error('Error processing PDF:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

const generateEmbeddingFromPDF = async (filePath) => {
  return new Promise((resolve, reject) => {
    exec(`YOUR_SCRIPT_TO_EXTRACT_EMBEDDING ${filePath}`, (error, stdout, stderr) => {
      if (error) {
        console.error('Error generating embedding from PDF:', error);
        reject(error);
      } else {
        const embeddings = stdout.trim();
        console.log('Embeddings from PDF:', embeddings);
        resolve(embeddings);
      }
    });
  });
};

app.post('/', async (request, response) => {
  const { chats } = request.body;

  try {
    // Get the user's message from the last chat entry
    const userMessage = chats[chats.length - 1].content;

    // Retrieve the embeddings of uploaded PDFs based on the context
    const pdfEmbeddings = await fetchPDFEmbeddings();

    // Include the PDF embeddings in the prompt
    const prompt = `You are a helpful assistant. User says: ${userMessage} ${pdfEmbeddings}`;

    const result = await axios.post(
      `https://api.openai.com/v1/engines/${engine}/completions`,
      {
        prompt,
        max_tokens: 150,
      },
      {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`,
        },
      }
    );

    const aiResponse = result.data.choices[0].text;

    console.log('AI Response:', aiResponse);

    response.json({
      output: aiResponse,
    });
  } catch (error) {
    console.error('Error processing request:', error);
    response.status(500).json({ error: 'Internal Server Error' });
  }
});

const fetchPDFEmbeddings = () => {
  // Implement logic to fetch PDF embeddings from storage or API
  // For now, return an empty string
  return '';
};

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
